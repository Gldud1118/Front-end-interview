/**
 * 실행 컨텍스트 식별자(변수, 함수, 클래스 등의)를 등록하고 관리하는 스코프와, 코드의 실행 순서 관리를 구현한 내부 메커니즘으로, 모든 코드는 실행 컨텍스트를 통해 실행되고 관리된다.
 * 식별자와 스코프는 실행 컨텍스트의 렉시컬 환경으로 관리하고, 코드 실행 순서는 실행 컨텍스트 스택(콜스택)으로 관리한다.
 */

// 자바스크립트 엔진은 먼저 전역 코드를 평가하여 전역 실행 컨텍스트를 생성하고 실행 컨텍스트 스택에 푸시한다.
const x = 1;

function foo() {
  const y = 2;

  function bar() {
    const z = 3;
    console.log(x + y + z);
  }

  bar();
  // bar 함수가 종료되면 코드의 제어권은 다시 foo함수로 이동된다. 이때 자바스크립트 엔진은 bar 함수 실행 컨텍스트를 실행 컨텍스트 스택에서 팝하여 제거한다.
}
// 함수가 호출되면 전역 코드의 실행은 일시 중단되고 코드의 제어권이 foo 함수 내부로 이동한다. 함수 코드를 평가하여 함수 실행 컨텍스트를 생성하고 실행컨텍스트 스택에 푸시한다.
foo();
// foo 함수가 종료되면 코드의 제어권은 다시 전역 코드로 이동한다. 이떄 자바스크립트 엔진은 foo함수 실행 컨텍스트를 실행 컨텍스트 스택에서 팝하여 제거한다. 그리고

// 더 이상 실행할 전역 코드가 남아있지 않으므로 전역 실행 컨텍스트도 실행 컨텍스트 스택에서 팝되어 실행 컨텍스트 스택에는 아무것도 남아있지 않게 된다.

// 실행 컨텍스트 스택의 최상위에 존재하는 실행 컨텍스트는 언제나 현재 실행 중인 코드의 실행 컨텍스트다.
